# SikadVoltz Backend - Production Docker Compose
# Includes: Multiple backend instances, Nginx load balancer, Redis, MongoDB
# For high-availability, scalable deployment

version: '3.8'

services:
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: sikadvoltz-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend1
      - backend2
      - backend3
    networks:
      - sikadvoltz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Instance 1
  backend1:
    build: .
    container_name: sikadvoltz-backend-1
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    ports:
      - "3000:3000"
    volumes:
      - backend_logs:/app/logs
    depends_on:
      - redis
      - mongodb
    networks:
      - sikadvoltz-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Instance 2
  backend2:
    build: .
    container_name: sikadvoltz-backend-2
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    ports:
      - "3001:3000"
    volumes:
      - backend_logs:/app/logs
    depends_on:
      - redis
      - mongodb
    networks:
      - sikadvoltz-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Instance 3
  backend3:
    build: .
    container_name: sikadvoltz-backend-3
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    ports:
      - "3002:3000"
    volumes:
      - backend_logs:/app/logs
    depends_on:
      - redis
      - mongodb
    networks:
      - sikadvoltz-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache/Session Store
  redis:
    image: redis:7-alpine
    container_name: sikadvoltz-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./deployment/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - sikadvoltz-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB (optional - if not using Atlas)
  mongodb:
    image: mongo:7
    container_name: sikadvoltz-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=sikadvoltz
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./deployment/mongod.conf:/etc/mongod.conf:ro
    command: mongod --config /etc/mongod.conf
    networks:
      - sikadvoltz-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Redis Insight (optional)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: sikadvoltz-redis-insight
    ports:
      - "8001:8001"
    volumes:
      - redis_insight:/db
    depends_on:
      - redis
    networks:
      - sikadvoltz-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring - Mongo Express (optional)
  mongo-express:
    image: mongo-express:latest
    container_name: sikadvoltz-mongo-express
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ROOT_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - sikadvoltz-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Log aggregation - Fluent Bit (optional)
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: sikadvoltz-fluent-bit
    volumes:
      - ./deployment/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - backend_logs:/var/log/backend:ro
      - nginx_logs:/var/log/nginx:ro
    networks:
      - sikadvoltz-network
    restart: unless-stopped
    profiles:
      - logging

networks:
  sikadvoltz-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  redis_insight:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local