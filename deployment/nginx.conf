# SikadVoltz Backend - Production Nginx Configuration
# High-Performance Load Balancer for 10/10 Backend Score
#
# Features:
# - Load balancing across multiple backend instances
# - SSL termination and security headers
# - Rate limiting and DDoS protection
# - Static file serving and caching
# - WebSocket support for real-time telemetry
# - Compression and performance optimization

upstream sikadvoltz_backend {
    # Load balancing method (least_conn for WebSocket compatibility)
    least_conn;
    
    # Backend instances - adjust based on your deployment
    server 127.0.0.1:3000 weight=1 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:3001 weight=1 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:3002 weight=1 max_fails=3 fail_timeout=30s;
    
    # Health check (requires nginx-plus or external module)
    # server 127.0.0.1:3000 health_check;
    
    # Keep connections alive for better performance
    keepalive 32;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=2r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
limit_conn_zone $server_name zone=conn_limit_per_server:10m;

# Main server block - HTTPS
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.sikadvoltz.com sikadvoltz-api.yourdomain.com;
    
    # SSL Configuration
    ssl_certificate /path/to/your/certificate.crt;
    ssl_certificate_key /path/to/your/private.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    
    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: ws:; font-src 'self';" always;
    
    # Hide server version
    server_tokens off;
    
    # Connection limits
    limit_conn conn_limit_per_ip 20;
    limit_conn conn_limit_per_server 1000;
    
    # Logging
    access_log /var/log/nginx/sikadvoltz-api.access.log combined buffer=32k flush=5s;
    error_log /var/log/nginx/sikadvoltz-api.error.log warn;
    
    # Client settings
    client_max_body_size 50M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Health check endpoint (bypass rate limiting)
    location = /health {
        access_log off;
        proxy_pass http://sikadvoltz_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # Keep-alive endpoint (bypass rate limiting)
    location = /keep-alive {
        access_log off;
        proxy_pass http://sikadvoltz_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # WebSocket upgrade for real-time telemetry
    location /ws {
        proxy_pass http://sikadvoltz_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket-specific timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Prevent buffering for real-time data
        proxy_buffering off;
        proxy_cache off;
    }
    
    # Authentication endpoints (strict rate limiting)
    location ~ ^/api/(v1/)?auth/ {
        limit_req zone=auth_limit burst=10 nodelay;
        limit_req_status 429;
        
        proxy_pass http://sikadvoltz_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeout settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Security for auth endpoints
        add_header X-Auth-Rate-Limited "true" always;
    }
    
    # Password reset endpoints (strict rate limiting)
    location ~ ^/api/(v1/)?password-reset/ {
        limit_req zone=auth_limit burst=5 nodelay;
        limit_req_status 429;
        
        proxy_pass http://sikadvoltz_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # File upload endpoints (limited rate)
    location ~ ^/api/(v1/)?(profile|upload)/ {
        limit_req zone=upload_limit burst=5 nodelay;
        
        proxy_pass http://sikadvoltz_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Extended timeouts for file uploads
        proxy_connect_timeout 30s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Larger body size for uploads
        client_max_body_size 100M;
    }
    
    # ESP32 telemetry endpoints (high frequency allowed)
    location ~ ^/api/(v1/)?esp32/ {
        limit_req zone=api_limit burst=50 nodelay;
        
        proxy_pass http://sikadvoltz_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_Set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Optimized for high-frequency telemetry
        proxy_buffering off;
        proxy_connect_timeout 5s;
        proxy_send_timeout 15s;
        proxy_read_timeout 15s;
    }
    
    # General API endpoints (moderate rate limiting)
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;
        limit_req_status 429;
        
        proxy_pass http://sikadvoltz_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Standard timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Caching for static-like API responses
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404 1m;
        
        # Add rate limit headers
        add_header X-RateLimit-Zone "api_limit" always;
    }
    
    # Static files (if serving any through nginx)
    location /static/ {
        alias /var/www/sikadvoltz/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Security for static files
        location ~* \.(php|jsp|pl|py|asp|sh)$ {
            deny all;
        }
    }
    
    # Robots.txt and security files
    location = /robots.txt {
        alias /var/www/sikadvoltz/robots.txt;
        access_log off;
        log_not_found off;
    }
    
    # Block access to sensitive files
    location ~* \.(git|env|sql|bak|backup|config)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Default catch-all (404)
    location / {
        return 404 '{"error":"Endpoint not found","code":404}';
        add_header Content-Type application/json;
    }
}

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name api.sikadvoltz.com sikadvoltz-api.yourdomain.com;
    
    # Redirect all HTTP traffic to HTTPS
    return 301 https://$server_name$request_uri;
}

# Admin/monitoring interface (optional)
server {
    listen 8080;
    server_name admin.sikadvoltz.com;
    
    # Basic authentication for admin access
    auth_basic "SikadVoltz Admin";
    auth_basic_user_file /etc/nginx/.htpasswd;
    
    # Nginx status page
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
    
    # Backend health status
    location /backend_health {
        proxy_pass http://sikadvoltz_backend/health;
        proxy_set_header Host $host;
    }
}