# SikadVoltz Backend - HAProxy Configuration
# Alternative to Nginx for Load Balancing
# Features: High performance, WebSocket support, health checks, SSL termination

global
    daemon
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    
    # SSL configuration
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 1024
    
    # Logging
    log 127.0.0.1:514 local0

defaults
    mode http
    timeout connect 10s
    timeout client 30s
    timeout server 30s
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s
    
    # Retry and error handling
    retries 3
    option redispatch
    option httplog
    option dontlognull
    option log-health-checks
    
    # Security
    option httpclose
    option forwardfor
    option originalto

# Frontend - SSL termination and routing
frontend sikadvoltz_frontend
    bind *:443 ssl crt /path/to/your/certificate.pem
    bind *:80
    
    # HTTP to HTTPS redirect
    redirect scheme https code 301 if !{ ssl_fc }
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate limiting using stick tables
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # API routing
    use_backend sikadvoltz_api if { path_beg /api/ }
    use_backend sikadvoltz_websocket if { hdr(upgrade) -i websocket }
    use_backend sikadvoltz_health if { path /health }
    use_backend sikadvoltz_health if { path /keep-alive }
    
    # Default backend
    default_backend sikadvoltz_api

# Backend - API servers
backend sikadvoltz_api
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Compression
    compression algo gzip
    compression type text/plain text/css text/javascript application/javascript application/json application/xml
    
    # Servers (adjust ports based on your deployment)
    server api1 127.0.0.1:3000 check weight 1 maxconn 1000
    server api2 127.0.0.1:3001 check weight 1 maxconn 1000
    server api3 127.0.0.1:3002 check weight 1 maxconn 1000
    
    # Connection reuse
    http-reuse aggressive

# Backend - WebSocket support
backend sikadvoltz_websocket
    balance source
    option httpchk GET /health
    
    # WebSocket-specific settings
    timeout tunnel 3600s
    timeout server 3600s
    
    # Same servers but optimized for WebSocket
    server ws1 127.0.0.1:3000 check weight 1
    server ws2 127.0.0.1:3001 check weight 1
    server ws3 127.0.0.1:3002 check weight 1

# Backend - Health checks (no rate limiting)
backend sikadvoltz_health
    balance roundrobin
    option httpchk GET /health
    
    # Quick health responses
    timeout server 5s
    
    server health1 127.0.0.1:3000 check
    server health2 127.0.0.1:3001 check
    server health3 127.0.0.1:3002 check

# Statistics interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    
    # Basic authentication (replace with your credentials)
    stats auth admin:your_secure_password_here
    
    # Only allow local access
    acl local_network src 127.0.0.1 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
    http-request deny unless local_network