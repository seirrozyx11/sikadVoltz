# Example Environment Configuration for SikadVoltz Backend
# Copy this file to .env and replace with your actual values
# DO NOT commit .env file - it contains real secrets!

# ============================================
# SERVER CONFIGURATION
# ============================================
PORT=3000
NODE_ENV=development

# ============================================
# DATABASE CONFIGURATION
# ============================================
# Get your MongoDB connection string from MongoDB Atlas
# Format: mongodb+srv://username:password@cluster.mongodb.net/database
MONGODB_URI=mongodb+srv://your-username:your-password@your-cluster.mongodb.net/sikadvoltz?retryWrites=true&w=majority

# ============================================
# JWT SECURITY CONFIGURATION
# ============================================
# Generate a secure JWT secret (minimum 32 characters, recommended 64+)
# Use this command: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
# Example secure format: 64-character hex string like below (DO NOT USE THIS EXACT ONE!)
JWT_SECRET=a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456789012345678901234567890abcdef
JWT_EXPIRES_IN=7d
JWT_REFRESH_EXPIRES_IN=7d

# ============================================
# GOOGLE OAUTH CONFIGURATION
# ============================================
# Get these from Google Developer Console -> APIs & Services -> Credentials
# Create OAuth 2.0 Client IDs for Web and Android
GOOGLE_WEB_CLIENT_ID=your-google-web-client-id.apps.googleusercontent.com
GOOGLE_ANDROID_CLIENT_ID=your-google-android-client-id.apps.googleusercontent.com

# ============================================
# CORS CONFIGURATION
# ============================================
# Development: Include localhost and mobile dev servers
ALLOWED_ORIGINS=http://localhost:8080,http://127.0.0.1:8080,capacitor://localhost,ionic://localhost,http://10.0.2.2:8080

# Production example (uncomment and modify for production):
# ALLOWED_ORIGINS=https://your-domain.com,capacitor://localhost,ionic://localhost

# ============================================
# EMAIL CONFIGURATION (Password Reset)
# ============================================
# For Gmail: Use App Passwords, not your regular password
# Enable 2FA first, then generate App Password in Google Account settings
EMAIL_USER=your-email@gmail.com
EMAIL_PASS=your-app-password-here
EMAIL_FROM=your-email@gmail.com
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587

# Frontend URL for password reset links
FRONTEND_URL=http://localhost:3000

# ============================================
# ADVANCED SECURITY (Optional)
# ============================================
# Separate secret for password reset tokens (optional - defaults to JWT_SECRET)
# PASSWORD_RESET_JWT_SECRET=your-separate-password-reset-secret
# PASSWORD_RESET_TOKEN_EXPIRY=15

# ============================================
# DEVELOPMENT & TESTING
# ============================================
# Logging level (error, warn, info, debug)
LOG_LEVEL=debug
 
# Test email for development
# TEST_EMAIL=your-test-email@gmail.com

# ============================================
# SETUP INSTRUCTIONS
# ============================================
# 1. Copy this file: cp .env.example .env
# 2. Generate JWT secret: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
# 3. Set up MongoDB Atlas account and get connection string
# 4. Create Google OAuth credentials for your app
# 5. Set up Gmail App Password for email functionality
# 6. Replace all placeholder values above
# 7. Start server: npm start